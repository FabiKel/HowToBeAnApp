// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/character.dart';
import 'models/inventory_item.dart';
import 'models/note.dart';
import 'models/skill.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3926976284960825798),
      name: 'Character',
      lastPropertyId: const obx_int.IdUid(20, 6936020362280275087),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1369267272661203982),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9214968411315947213),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3825450682752723298),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7346897996475638471),
            name: 'updated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4464259847765636860),
            name: 'gender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1105999053889805307),
            name: 'age',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6646942100512848754),
            name: 'lp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 557000068553001836),
            name: 'lpMax',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3002969220915429931),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1843655753175391394),
            name: 'religion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6647537592252781550),
            name: 'profession',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8470754044369777383),
            name: 'family',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4294777472193799299),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1768457263694007463),
            name: 'isHidden',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 349192511036393982),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6936020362280275087),
            name: 'gbpUsed',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'skills', srcEntity: 'Skill', srcField: 'characterSkill'),
        obx_int.ModelBacklink(
            name: 'notes', srcEntity: 'Note', srcField: 'characterNote'),
        obx_int.ModelBacklink(
            name: 'inventory',
            srcEntity: 'InventoryItem',
            srcField: 'characterInvItem')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8593977249015221319),
      name: 'InventoryItem',
      lastPropertyId: const obx_int.IdUid(5, 8385737859424788151),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9034101402660131894),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2864117045962556829),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3564445865755714349),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5207425062884364070),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8385737859424788151),
            name: 'characterInvItemId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8137722359035426682),
            relationTarget: 'Character')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2736022376275115370),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(6, 1358748112006608851),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5471018038225609136),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4933737609557417697),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5806365636296300591),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2381496639827025397),
            name: 'created',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6568855569562104153),
            name: 'characterNoteId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 3619455684558896048),
            relationTarget: 'Character'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1358748112006608851),
            name: 'updated',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3782489303599942243),
      name: 'Skill',
      lastPropertyId: const obx_int.IdUid(6, 2784253262204774765),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2758800586986537530),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 851847850239319742),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7318368836976979367),
            name: 'value',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5868509515336393657),
            name: 'characterSkillId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 9001692497310881221),
            relationTarget: 'Character'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2784253262204774765),
            name: 'typeIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 3782489303599942243),
      lastIndexId: const obx_int.IdUid(3, 9001692497310881221),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4131868325971931602,
        8533648314882943311,
        9113918794386389017,
        7279305249759774662,
        3824280087345013779
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Character: obx_int.EntityDefinition<Character>(
        model: _entities[0],
        toOneRelations: (Character object) => [],
        toManyRelations: (Character object) => {
              obx_int.RelInfo<Skill>.toOneBacklink(4, object.id,
                  (Skill srcObject) => srcObject.characterSkill): object.skills,
              obx_int.RelInfo<Note>.toOneBacklink(5, object.id,
                  (Note srcObject) => srcObject.characterNote): object.notes,
              obx_int.RelInfo<InventoryItem>.toOneBacklink(5, object.id,
                      (InventoryItem srcObject) => srcObject.characterInvItem):
                  object.inventory
            },
        getId: (Character object) => object.id,
        setId: (Character object, int id) {
          object.id = id;
        },
        objectToFB: (Character object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final genderOffset = fbb.writeString(object.gender);
          final bodyOffset = fbb.writeString(object.body);
          final religionOffset = fbb.writeString(object.religion);
          final professionOffset = fbb.writeString(object.profession);
          final familyOffset = fbb.writeString(object.family);
          final imageOffset = fbb.writeString(object.image);
          final descriptionOffset = fbb.writeString(object.description);
          final gbpUsedOffset = fbb.writeListInt64(object.gbpUsed);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.created.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updated?.millisecondsSinceEpoch);
          fbb.addOffset(4, genderOffset);
          fbb.addInt64(5, object.age);
          fbb.addInt64(6, object.lp);
          fbb.addInt64(7, object.lpMax);
          fbb.addOffset(8, bodyOffset);
          fbb.addOffset(9, religionOffset);
          fbb.addOffset(10, professionOffset);
          fbb.addOffset(11, familyOffset);
          fbb.addOffset(12, imageOffset);
          fbb.addBool(14, object.isHidden);
          fbb.addOffset(15, descriptionOffset);
          fbb.addOffset(19, gbpUsedOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updatedParam = updatedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedValue);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final ageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final lpParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final lpMaxParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final religionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final professionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final familyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final isHiddenParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final gbpUsedParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 42, []);
          final object = Character(
              id: idParam,
              name: nameParam,
              created: createdParam,
              updated: updatedParam,
              gender: genderParam,
              age: ageParam,
              lp: lpParam,
              lpMax: lpMaxParam,
              body: bodyParam,
              religion: religionParam,
              profession: professionParam,
              family: familyParam,
              image: imageParam,
              description: descriptionParam,
              isHidden: isHiddenParam,
              gbpUsed: gbpUsedParam);
          obx_int.InternalToManyAccess.setRelInfo<Character>(
              object.skills,
              store,
              obx_int.RelInfo<Skill>.toOneBacklink(
                  4, object.id, (Skill srcObject) => srcObject.characterSkill));
          obx_int.InternalToManyAccess.setRelInfo<Character>(
              object.notes,
              store,
              obx_int.RelInfo<Note>.toOneBacklink(
                  5, object.id, (Note srcObject) => srcObject.characterNote));
          obx_int.InternalToManyAccess.setRelInfo<Character>(
              object.inventory,
              store,
              obx_int.RelInfo<InventoryItem>.toOneBacklink(5, object.id,
                  (InventoryItem srcObject) => srcObject.characterInvItem));
          return object;
        }),
    InventoryItem: obx_int.EntityDefinition<InventoryItem>(
        model: _entities[1],
        toOneRelations: (InventoryItem object) => [object.characterInvItem],
        toManyRelations: (InventoryItem object) => {},
        getId: (InventoryItem object) => object.id,
        setId: (InventoryItem object, int id) {
          object.id = id;
        },
        objectToFB: (InventoryItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.characterInvItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = InventoryItem(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              image: imageParam);
          object.characterInvItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.characterInvItem.attach(store);
          return object;
        }),
    Note: obx_int.EntityDefinition<Note>(
        model: _entities[2],
        toOneRelations: (Note object) => [object.characterNote],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, textOffset);
          fbb.addInt64(3, object.created);
          fbb.addInt64(4, object.characterNote.targetId);
          fbb.addInt64(5, object.updated);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Note(
              id: idParam,
              title: titleParam,
              text: textParam,
              created: createdParam)
            ..updated =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.characterNote.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.characterNote.attach(store);
          return object;
        }),
    Skill: obx_int.EntityDefinition<Skill>(
        model: _entities[3],
        toOneRelations: (Skill object) => [object.characterSkill],
        toManyRelations: (Skill object) => {},
        getId: (Skill object) => object.id,
        setId: (Skill object, int id) {
          object.id = id;
        },
        objectToFB: (Skill object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.value);
          fbb.addInt64(3, object.characterSkill.targetId);
          fbb.addInt64(5, object.typeIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final typeIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = Skill(
              id: idParam,
              name: nameParam,
              value: valueParam,
              typeIndex: typeIndexParam);
          object.characterSkill.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.characterSkill.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Character] entity fields to define ObjectBox queries.
class Character_ {
  /// See [Character.id].
  static final id =
      obx.QueryIntegerProperty<Character>(_entities[0].properties[0]);

  /// See [Character.name].
  static final name =
      obx.QueryStringProperty<Character>(_entities[0].properties[1]);

  /// See [Character.created].
  static final created =
      obx.QueryDateProperty<Character>(_entities[0].properties[2]);

  /// See [Character.updated].
  static final updated =
      obx.QueryDateProperty<Character>(_entities[0].properties[3]);

  /// See [Character.gender].
  static final gender =
      obx.QueryStringProperty<Character>(_entities[0].properties[4]);

  /// See [Character.age].
  static final age =
      obx.QueryIntegerProperty<Character>(_entities[0].properties[5]);

  /// See [Character.lp].
  static final lp =
      obx.QueryIntegerProperty<Character>(_entities[0].properties[6]);

  /// See [Character.lpMax].
  static final lpMax =
      obx.QueryIntegerProperty<Character>(_entities[0].properties[7]);

  /// See [Character.body].
  static final body =
      obx.QueryStringProperty<Character>(_entities[0].properties[8]);

  /// See [Character.religion].
  static final religion =
      obx.QueryStringProperty<Character>(_entities[0].properties[9]);

  /// See [Character.profession].
  static final profession =
      obx.QueryStringProperty<Character>(_entities[0].properties[10]);

  /// See [Character.family].
  static final family =
      obx.QueryStringProperty<Character>(_entities[0].properties[11]);

  /// See [Character.image].
  static final image =
      obx.QueryStringProperty<Character>(_entities[0].properties[12]);

  /// See [Character.isHidden].
  static final isHidden =
      obx.QueryBooleanProperty<Character>(_entities[0].properties[13]);

  /// See [Character.description].
  static final description =
      obx.QueryStringProperty<Character>(_entities[0].properties[14]);

  /// See [Character.gbpUsed].
  static final gbpUsed =
      obx.QueryIntegerVectorProperty<Character>(_entities[0].properties[15]);

  /// see [Character.skills]
  static final skills =
      obx.QueryBacklinkToMany<Skill, Character>(Skill_.characterSkill);

  /// see [Character.notes]
  static final notes =
      obx.QueryBacklinkToMany<Note, Character>(Note_.characterNote);

  /// see [Character.inventory]
  static final inventory = obx.QueryBacklinkToMany<InventoryItem, Character>(
      InventoryItem_.characterInvItem);
}

/// [InventoryItem] entity fields to define ObjectBox queries.
class InventoryItem_ {
  /// See [InventoryItem.id].
  static final id =
      obx.QueryIntegerProperty<InventoryItem>(_entities[1].properties[0]);

  /// See [InventoryItem.name].
  static final name =
      obx.QueryStringProperty<InventoryItem>(_entities[1].properties[1]);

  /// See [InventoryItem.description].
  static final description =
      obx.QueryStringProperty<InventoryItem>(_entities[1].properties[2]);

  /// See [InventoryItem.image].
  static final image =
      obx.QueryStringProperty<InventoryItem>(_entities[1].properties[3]);

  /// See [InventoryItem.characterInvItem].
  static final characterInvItem =
      obx.QueryRelationToOne<InventoryItem, Character>(
          _entities[1].properties[4]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// See [Note.id].
  static final id = obx.QueryIntegerProperty<Note>(_entities[2].properties[0]);

  /// See [Note.title].
  static final title =
      obx.QueryStringProperty<Note>(_entities[2].properties[1]);

  /// See [Note.text].
  static final text = obx.QueryStringProperty<Note>(_entities[2].properties[2]);

  /// See [Note.created].
  static final created =
      obx.QueryIntegerProperty<Note>(_entities[2].properties[3]);

  /// See [Note.characterNote].
  static final characterNote =
      obx.QueryRelationToOne<Note, Character>(_entities[2].properties[4]);

  /// See [Note.updated].
  static final updated =
      obx.QueryIntegerProperty<Note>(_entities[2].properties[5]);
}

/// [Skill] entity fields to define ObjectBox queries.
class Skill_ {
  /// See [Skill.id].
  static final id = obx.QueryIntegerProperty<Skill>(_entities[3].properties[0]);

  /// See [Skill.name].
  static final name =
      obx.QueryStringProperty<Skill>(_entities[3].properties[1]);

  /// See [Skill.value].
  static final value =
      obx.QueryIntegerProperty<Skill>(_entities[3].properties[2]);

  /// See [Skill.characterSkill].
  static final characterSkill =
      obx.QueryRelationToOne<Skill, Character>(_entities[3].properties[3]);

  /// See [Skill.typeIndex].
  static final typeIndex =
      obx.QueryIntegerProperty<Skill>(_entities[3].properties[4]);
}
